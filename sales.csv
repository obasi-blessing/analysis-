import pandas as pd

# -------------------------------
# STEP 1: Create and Save CSV File
# -------------------------------
data = {
    "OrderID": [1, 2, 3, 4, 5],
    "Product": ["Laptop", "Phone", "Tablet", "Headphones", "Monitor"],
    "Quantity": [2, 1, None, 3, 2],   # Missing value in row 3
    "Price": [800, 500, 300, None, 200],  # Missing value in row 4
    "Total": [1600, 500, None, 450, 400]  # Missing value in row 3
}

# Convert dictionary to DataFrame
df = pd.DataFrame(data)


# Save dataset as CSV file (run this only once)
df.to_csv("sales.csv", index=False)

print(" sales.csv created successfully!")
print(" Original Dataset (with missing values):")
print(df, "\n")


# -------------------------------
# STEP 2: Load, Inspect, and Clean
# -------------------------------

# Load dataset from CSV
df = pd.read_csv("sales.csv")

print(" First 5 rows of dataset:")
print(df.head(), "\n")

print(" Dataset Info:")
print(df.info(), "\n")

print(" Missing Values (before cleaning):")
print(df.isnull().sum(), "\n")

# --- Data Cleaning ---
# Fill missing Quantity with mean
df["Quantity"].fillna(df["Quantity"].mean(), inplace=True)

# Fill missing Price with mean
df["Price"].fillna(df["Price"].mean(), inplace=True)

# Recalculate Total (Quantity Ã— Price)
df["Total"] = df["Quantity"] * df["Price"]

print(" Missing Values (after cleaning):")
print(df.isnull().sum(), "\n")

print("Cleaned Dataset:")
print(df)




# Load the cleaned dataset
df = pd.read_csv("sales.csv")

# -------------------------------
# STEP 1: Compute Basic Statistics
# -------------------------------
print(" Basic Statistics (Numerical Columns):")
print(df.describe(), "\n")  # mean, std, min, max, etc.

# -------------------------------
# STEP 2: Grouping by Categorical Column
# -------------------------------
print(" Average Sales (Total) by Product:")
grouped = df.groupby("Product")["Total"].mean()
print(grouped, "\n")

# -------------------------------
# STEP 3: Identify Patterns / Insights
# -------------------------------
print("Insights:")

# Example 1: Which product sold the most (highest Total)?
highest_sales = grouped.idxmax()
print(f"- The product with the highest average total sales is: {highest_sales}")

# Example 2: Which product sold the least?
lowest_sales = grouped.idxmin()
print(f"- The product with the lowest average total sales is: {lowest_sales}")

# Example 3: Compare mean vs. median Quantity
mean_quantity = df["Quantity"].mean()
median_quantity = df["Quantity"].median()
print(f"- Mean Quantity = {mean_quantity:.2f}, Median Quantity = {median_quantity:.2f}")
if mean_quantity > median_quantity:
    print("  This suggests a slight right-skew (some high orders increase the mean).")
else:
    print("  This suggests a balanced or left-skewed distribution.")





import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# ------------------------------------
# STEP 1: Load Dataset with Error Handling
# ------------------------------------
try:
    from sklearn.datasets import load_iris
    
    # Load Iris dataset into pandas DataFrame
    iris_data = load_iris(as_frame=True)
    df = iris_data.frame  # includes both data and target (species)
    
    print("Iris dataset loaded successfull!")
    print(df.head(), "\n")
    
except FileNotFoundError:
    print(" Error: Dataset file not found.")
except Exception as e:
    print(f"An error occurred: {e}")

# ------------------------------------
# STEP 2: Line Chart (Trend Example)
# ------------------------------------
# We'll simulate a "trend" by plotting petal length averages by index (just for illustration)
plt.figure(figsize=(8,5))
plt.plot(df.index, df["petal length (cm)"], label="Petal Length", color="blue")
plt.title("Line Chart: Petal Length Trend Over Samples")
plt.xlabel("Sample Index")
plt.ylabel("Petal Length (cm)")
plt.legend()
plt.show()

# ------------------------------------
# STEP 3: Bar Chart (Average Petal Length per Species)
# ------------------------------------
plt.figure(figsize=(8,5))
sns.barplot(x="target", y="petal length (cm)", data=df, estimator="mean", palette="viridis")
plt.title("Bar Chart: Average Petal Length per Species")
plt.xlabel("Species")
plt.ylabel("Average Petal Length (cm)")
plt.show()

# ------------------------------------
# STEP 4: Histogram (Distribution of Sepal Length)
# ------------------------------------
plt.figure(figsize=(8,5))
plt.hist(df["sepal length (cm)"], bins=15, color="orange", edgecolor="black")
plt.title("Histogram: Sepal Length Distribution")
plt.xlabel("Sepal Length (cm)")
plt.ylabel("Frequency")
plt.show()

# ------------------------------------
# STEP 5: Scatter Plot (Sepal Length vs Petal Length)
# ------------------------------------
plt.figure(figsize=(8,5))
sns.scatterplot(x="sepal length (cm)", y="petal length (cm)", hue="target", data=df, palette="deep")
plt.title("Scatter Plot: Sepal Length vs Petal Length")
plt.xlabel("Sepal Length (cm)")
plt.ylabel("Petal Length (cm)")
plt.legend(title="Species")
plt.show()
